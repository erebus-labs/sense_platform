Use Case: Collecting Data

	This use case describes a scenario where a person wishes to use our system to measure something for which there is currently a supported sensor.
	Anne wishes to study her exposure to methane throughout the work day in her machine shop. She decides to purchase our system, including a VOC methane sensor. After reading the supplied material, she learns that she should start by downloading the Chrome App for this product. Following the instructions, she opens the App and uses it to plan out her experiment. She indicates that her setup will include one methane sensor named "shop_voc" attached to ADC Port 1, and that she wants a measurement every half hour.
	At this point she prepares the device for programming. She attaches it to her computer via USB and puts it into programming mode by powering it up while holding the programming button. She returns to the App and presses the "program device" button. The App sees that there is an attached device in programming mode, programs it, and verifies success. She may now power down and disconnect the device.
	Now Anne may place the device with attached sensor in her shop near where she is concerned about a methane leak. As soon as she powers on the device, it begins logging measurements. After leaving it in place for a week, Anne powers down the device and removes the SD card.
	When she inserts the card in her computer, she sees that there is one .CSV (comma separated variable) file on the card. She decides to use Microsoft Excel to open this file. It shows one row for each measurement, and two columns: one with the timestamp and one with the translated value. Using her basic Excel skills, Anne produces a graph of the data that she can analyze in whatever way she chooses.
	
Use Case: Sensor Design
	
	This use case describes a scenario where a person wishes to use our system to measure something for which they must create a supported sensor.
	Our subject, Dan, wishes to use our system to measure the Relative Humidity (RH) and temperature in his greenhouse. Although there is not currently supported sensors for measuring these, he knows that this can easily be rectified. 
	After reading the wiki page on sensor design, Dan learns that the system will support sensors with either an analog voltage output or an I2C output, and that the board will supply the sensor with 3.3/5VDC. With this in mind, he purchases a TelAire T9602 Humidity and Temperature sensor. Although this component gives it's two outputs (RH and temperature) as Pulse Width Modulation (PWM) signals, Dan knows that he can convert the PWM signals to steady voltages by using a capacitor on each signal. After this modification, the component is now ready to interface with the device on a hardware level.
	Now Dan needs to describe to the device how to read the sensors. After referring to the wiki, he composes two text files (one for each sensor), carefully following the supplied format, to create two sensor definition files. These files define the name of the sensor type, what connection type it is (analog, in this case), and what the transfer function is for converting from the 12bit ADC value to the proper units (e.g. deg C for the temperature sensor). Had Dan opted to use an I2C type sensor, the corresponding file would include information about how to initialize and read from the sensor.
	Dan places these files in his local sensor definition repository. When he opens the Chrome App, it loads the sensor types, allowing Dan to select these types when creating his sensor configuration. He may now proceed as described in the "Collecting Data" use case.
	
Use Case: Classroom

	This use case describes a scenario where a teacher facilitates a grade school student in using our system.
	Patrick, a middle schooler, wishes to illustrate the motion relationship between the sun and the earth for his science project. He plans to accurately predict how sunlight will pass through a window into a point on the countertop in a 24-hour period using time of year, the latitude, and the dimensions and orientation of the window. 
	Since there is not currently a light sensor supported by this system, Patrick gets assistance from his teacher, Mr. Reed, in creating a supported sensor. They takes steps similar to Dan and his humidity sensor to pick out an appropriate light sensor, create a sensor definition file, and add it to Patrick's local sensor repository.
	From here, Patrick can use the Chrome App with minimal direction to create a configuration that samples the light sensor once per minute. After the sensor has been in place and recording for a full 24 hours, Patrick loads the SD card into his computer and opens the .csv file. Mr. Reed helps him to procure a simple graph of light over time, which Patrick uses in his presentation and wins first prize by a landslide.